[log]
  # By default, the level is set to ERROR. Alternative logging levels
  # are DEBUG, PANIC, FATAL, ERROR, WARN, and INFO.
  level = "DEBUG"
  filePath = "/traefik.log"

[accesslog]
  filePath = "/traefikAccess.log"

[docker]
  # Defines a default docker network to use for connections to all
  # containers.  This option can be overridden on a container basis
  # with the traefik.docker.network label.
  [docker.network]
    network = "traefik"
    external = "true"

  # Expose containers by default through Traefik. If set to false,
  # containers that don't have a traefik.enable=true label will be
  # ignored from the resulting routing configuration.
  exposedbydefault = true

[api]
  # Enable the API in insecure mode, which means that the API will be
  # available directly on the entryPoint named traefik. If the entryPoint
  # named traefik is not configured, it will be automatically created on
  # port 8080.
  insecure = true
  
[providers]
  # Connection to docker host system (docker.sock)
  # Attach labels to your containers and let Traefik do the rest!
  # Traefik works with both Docker (standalone) Engine and Docker Swarm Mode.
  # See: https://docs.traefik.io/providers/docker/
  [providers.docker]
    # Traefik requires access to the docker socket to get its dynamic
    # configuration.
    endpoint = "unix:///var/run/docker.sock"




# EntryPoints are the network entry points into Traefik. They define
# the port which will receive the packets, and whether to listen for
# TCP or UDP.
# See: https://docs.traefik.io/routing/entrypoints/
# NOTE: If a TLS section (i.e. any of its fields) is defined in your docker-compose.yml file,
# then the default configuration does not apply at all.
[entryPoints]
  # Standard HTTP redirects to HTTPS
  [entryPoints.http]
    address = ":80"
    [entryPoints.http.http]
      [entryPoints.http.http.redirections]
        [entryPoints.http.http.redirections.entrypoint]
          to = "https"
          scheme = "https"
  # Standard HTTPS
  [entryPoints.https]
    address = ":443"
    [entryPoints.https.http.tls]
      certResolver = "cloudflare.acme"
      [entryPoints.https.http.tls.domains]
        main = ["YOUR.DOMAIN"]
        # SANS are any other hostnames which Traefik should obtain a certificate for.
        # If you are using DNS for LetsEncrypt, you can set a wildcard.
        # Include all possible hostnames of this server.
        sans = ["*.YOUR.DOMAIN"]
  # Alternate HTTPS Port (for services - accepts both HTTP and HTTP by not defining a TLS configuration here)

# Enable ACME (Let's Encrypt): automatic SSL.
[certificatesResolvers]
  [certificatesResolvers.cloudflare]
    [certificatesResolvers.cloudflare.acme]
      email = "example@email.com"
      storage = "acme.json"
     # caServer = "https://acme-staging-v02.api.letsencrypt.org/directory" ##Activate this caServer for testing purposes to not to hit api limit at let's encrypt.

  # Use a DNS-01 ACME challenge rather than HTTP-01 challenge.
  # Mandatory for wildcard certificate generation.
      [certificatesResolvers.cloudflare.acme.DNSChallenge]
    # Update this to your provider of choice and then ensure necessary variables are in the .env file to support it.
        provider = "cloudflare"
    #delayBeforeCheck = 0
    
    # A DNS server used to check whether the DNS is set up correctly before
    # making the ACME request. Ideally a DNS server that isn't going to cache an old entry.
        resolvers = ["1.1.1.1:53", "1.0.0.1:53"]

[retry]
